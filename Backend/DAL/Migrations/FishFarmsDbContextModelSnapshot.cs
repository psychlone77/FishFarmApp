// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(FishFarmsDbContext))]
    partial class FishFarmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.FishFarmEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CageCount")
                        .HasColumnType("int");

                    b.Property<bool>("HasBarge")
                        .HasColumnType("bit");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FishFarms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CageCount = 10,
                            HasBarge = true,
                            ImageURL = "https://fishybusiness.com/",
                            Latitude = 56.123399999999997,
                            Longitude = 12.1234,
                            Name = "Fishy Business"
                        },
                        new
                        {
                            Id = 2,
                            CageCount = 10,
                            HasBarge = true,
                            ImageURL = "https://fishybusiness2.com/",
                            Latitude = 56.123399999999997,
                            Longitude = 12.1234,
                            Name = "Fishy Business 2"
                        });
                });

            modelBuilder.Entity("DAL.Entities.WorkerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CertifiedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FishFarmId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerPosition")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FishFarmId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DAL.Entities.WorkerEntity", b =>
                {
                    b.HasOne("DAL.Entities.FishFarmEntity", "FishFarm")
                        .WithMany("Workers")
                        .HasForeignKey("FishFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishFarm");
                });

            modelBuilder.Entity("DAL.Entities.FishFarmEntity", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
